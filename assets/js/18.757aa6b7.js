(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{296:function(t,e,a){"use strict";a.r(e);var s=a(40),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-constant-variable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-constant-variable","aria-hidden":"true"}},[t._v("#")]),t._v(" (1) Constant & Variable")]),t._v(" "),a("ul",[a("li",[t._v("Contant 상수 : 한 번 값이 대입되면 바꿀 수 없는 값")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yongtae"')]),t._v("\n")])])]),a("ul",[a("li",[t._v("Variable 변수")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("가급적 var보다는 "),a("strong",[t._v("let의 사용을 권장한다.")])])]),t._v(" "),a("li",[a("p",[t._v("Why?")]),t._v(" "),a("ul",[a("li",[t._v("고려해야할 변수가 적다.")]),t._v(" "),a("li",[t._v("코드의 가독성이 좋다.")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-type-annotation-type-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-type-annotation-type-interface","aria-hidden":"true"}},[t._v("#")]),t._v(" (2) Type Annotation / Type Interface")]),t._v(" "),a("ul",[a("li",[t._v("Type Annotation")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String 타입임을 명시")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Int 타입임을 명시")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Swift는 Type-Safe Language다!\n"),a("ul",[a("li",[t._v("Compile 단계에서 type checking 수행")])])]),t._v(" "),a("li",[t._v("Type Interface\n"),a("ul",[a("li",[t._v("type을 명시하지 않아도 처음 대입되는 값을 compiler가 분석하여 type을 추론한다.")])])])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String 타입임을 추론")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-console-출력"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-console-출력","aria-hidden":"true"}},[t._v("#")]),t._v(" (3) Console 출력")]),t._v(" "),a("ul",[a("li",[t._v("print 함수")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" msg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello,"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" msg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, World!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),t._v("msg1"),a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v(' Yongtae!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, Yongtae!")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Foundation의 NSLog : objective-c에서 쓰이던 문법으로 레거시 코드에서 흔히 발견 가능")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),t._v("msg2"),a("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-여러가지-type들"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-여러가지-type들","aria-hidden":"true"}},[t._v("#")]),t._v(" (4) 여러가지 Type들")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Value Type vs Reference Type")])]),t._v(" "),a("ul",[a("li",[t._v("모든 타입을 크게 Value Type / Reference Type 두 가지로 나눌 수 있다.")]),t._v(" "),a("li",[t._v("각각이 다른 언어의 Call by Value / Call by Refernce에 대응된다고 이해했다.")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Value Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Reference Type")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("- 선언 시 사용한 상수, 변수 외엔 참조 불가"),a("br"),t._v("- 함수, 메소드 인자로 넘어가거나 return되면 복사됨"),a("br"),t._v("- 사본을 수정해도 원본에 영향없음")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("- 선언 시 사용한 상수, 변수 외에도 참조가 가능"),a("br"),a("br"),t._v("- 사본을 변경하면 원본이 한꺼번에 변경")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("복사")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("값 자체가 복사 각각의 instance 생성")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("reference가 대입, 같은 instance 가리킴")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("대입")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("새로운 변수나 상수에 대입되면 복사됨")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("새로운 상수, 변수에 대입되면 참조")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("member값 변경")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("let인 경우는 불가")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("let,var 둘 다 가능")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("해당 요소")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("enum / struct")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("class / function")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("대표적인 것")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("String, Array, Dictionary")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Class로 선언된 객체")])])])]),t._v(" "),a("ul",[a("li",[t._v("let으로 reference type의 instance를 선언하더라도 멤버 변수들은 수정이 가능하다!")]),t._v(" "),a("li",[a("strong",[t._v("Copy on Write")]),t._v(" 란?\n"),a("ul",[a("li",[t._v("복사를 매번 하는 것이 아니라 복사본의 변경 유무를 판단하여 기존 값을 재사용하거나 필요하다면 그 때 복사를 하는 것")])])]),t._v(" "),a("li",[t._v("Value Type의 장점\n"),a("ul",[a("li",[t._v("Dereference과정이 필요가 없기 때문에 속도 면에서 더 빠르다.")]),t._v(" "),a("li",[t._v("__Mutability 제어__가 강력하다. let으로 선언하면 절대 못 바꾼다! ==> 함수형 언어에 더 적합하게 사용 가능하다.")])])]),t._v(" "),a("li",[t._v("Integers\n"),a("ul",[a("li",[t._v("Int8, Int16, Int32, Int64")]),t._v(" "),a("li",[t._v("UInt8, UInt16, UInt32, UInt64")])])]),t._v(" "),a("li",[t._v("Floating Point Numbers\n"),a("ul",[a("li",[a("strong",[t._v("Float")]),t._v(" : 32bit")]),t._v(" "),a("li",[a("strong",[t._v("Double")]),t._v(" : 64bit")])])])]),t._v(" "),a("ul",[a("li",[t._v("Type Inference : 타입유추가 가능하지만 명시하면 compile time에 도움이 된다.")]),t._v(" "),a("li",[t._v("Numberic Type Conversion : Type Casting (x) type이 다른 경우에 새로운 value를 생성해서 계산해주어야 한다.")]),t._v(" "),a("li",[t._v("Boolean\n"),a("ul",[a("li",[t._v("1과 true가 다른 점이 큰 차이! (다른 언어와 달리..)")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("잘못된 예시")])]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// i가 Int로 추론되기 때문에 사용 불가!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Tuple")])]),t._v(" "),a("h2",{attrs:{id:"_5-optionals란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-optionals란","aria-hidden":"true"}},[t._v("#")]),t._v(" (5) Optionals란?")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Optional의 의미: 값이 존재하지 않을 수도 있다!")]),t._v(" "),a("ul",[a("li",[t._v("즉, nil값을 가질 수도 있다.")])])]),t._v(" "),a("li",[a("p",[t._v("var x: Int? ( var x: Int | nil )")])]),t._v(" "),a("li",[a("p",[t._v("optional 변수는 값을 명시적으로 초기화해주지 않으면 nil로 초기화된다.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("의미적으로 특정 type의 값을 저장하는 상자라고 이해할 수 있다.")])])]),t._v(" "),a("li",[a("p",[t._v("Optional 변수를 그대로 사용해서는 안되며, "),a("strong",[t._v("unwrapping 과정이 항상 필요하다.")])])])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("Unwrapping이란?")]),t._v(" "),a("ul",[a("li",[t._v("상자의 포장을 벗겨 실제 데이터를 가져오는 것!")])])]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("Swift는 어떻게 코딩하는 게 좋을까?")]),t._v(" "),a("ul",[a("li",[t._v("매우 강력한 Type Checking 기능을 가지고 있다. 그러므로 항상 Type에 신경써야한다.")]),t._v(" "),a("li",[t._v("var는 최소한! let을 늘리자!")]),t._v(" "),a("li",[t._v("값의 부재가능성이 없다면 Optional 사용하는 것은 자제하자.")])])])])},[],!1,null,null,null);e.default=n.exports}}]);